syntax = "proto3";

package slurmx_grpc;

message Negotiation {
  uint32 version = 1;
}

message TaskInfo {
  string executive_path = 1;
  repeated string arguments = 2;

  message ResourceLimit {
    uint64 cpu_core_limit = 1;
    uint64 cpu_shares = 2;
    uint64 memory_limit_bytes = 3;
    uint64 memory_sw_limit_bytes = 4;
    uint64 memory_soft_limit_bytes = 5;
    uint64 blockio_weight = 6;
  }

  ResourceLimit resource_limit = 3;
}

message Signal {
  enum SignalType {
    Interrupt = 0;
  }
  SignalType signal_type = 1;
}

message IoRedirection {
  string buf = 1;
}

message TaskExitStatus {
  uint32 return_value = 1;
  string reason = 2;
}

message SrunXRequest{
  enum Type {
    Negotiation = 0;
    NewTask = 1;
    Signal = 2;
  }
  Type type = 1;

  oneof payload {
    Negotiation negotiation = 2;
    TaskInfo task_info = 3;
    Signal signal = 4;
  }
}

message SrunXReply {
  enum Type {
    IoRedirection = 0;
    ExitStatus = 1;
  }
  Type type = 1;

  oneof payload {
    IoRedirection io_redirection = 2 ;
    TaskExitStatus task_exit_status = 3;
  }
}

message SlurmXdRequest {
  enum Type {
    Negotiation = 0;
    NewTask = 1;
    Signal = 2;
  }
  Type type = 1;

  oneof payload {
    Negotiation negotiation = 2;
    TaskInfo task_info = 3;
    Signal signal = 4;
  }
}

message SlurmXdReply {
  enum Type {
    IoRedirection = 0;
    ExitStatus = 1;
  }
  Type type = 1;

  oneof payload {
    IoRedirection io_redirection = 2 ;
    TaskExitStatus task_exit_status = 3;
  }
}

service SlurmCtlXd {
  rpc SlurmXdStream(stream SlurmXdRequest) returns (stream SlurmXdReply);
  rpc SrunXStream(stream SrunXRequest) returns (stream SrunXReply);
}